/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface EscrowInterface extends utils.Interface {
  functions: {
    "add_hold_record(string,string,string,address,address)": FunctionFragment;
    "holdMapping(string)": FunctionFragment;
    "process_hold_record(string,string)": FunctionFragment;
    "release_hold_record(string)": FunctionFragment;
    "simpleHoldMapping(uint256)": FunctionFragment;
    "update_mappingthen_success(uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "add_hold_record"
      | "holdMapping"
      | "process_hold_record"
      | "release_hold_record"
      | "simpleHoldMapping"
      | "update_mappingthen_success"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "add_hold_record",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "holdMapping",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "process_hold_record",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "release_hold_record",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "simpleHoldMapping",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "update_mappingthen_success",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "add_hold_record",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "holdMapping",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "process_hold_record",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "release_hold_record",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "simpleHoldMapping",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "update_mappingthen_success",
    data: BytesLike
  ): Result;

  events: {
    "AddHoldRecordEvent(string,string,string,string,address,address)": EventFragment;
    "ProcessHoldRecordEvent(string,string,string)": EventFragment;
    "ReleaseHoldRecordEvent(string,string)": EventFragment;
    "SimpleUpdatedEvent(uint256,uint256)": EventFragment;
    "TransferPaymentEvent(string,address,address,string,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddHoldRecordEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProcessHoldRecordEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReleaseHoldRecordEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SimpleUpdatedEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferPaymentEvent"): EventFragment;
}

export interface AddHoldRecordEventEventObject {
  indexedRequestId: string;
  nonIndexRequestId: string;
  budget: string;
  currency: string;
  payerAddress: string;
  payeeAddress: string;
}
export type AddHoldRecordEventEvent = TypedEvent<
  [string, string, string, string, string, string],
  AddHoldRecordEventEventObject
>;

export type AddHoldRecordEventEventFilter =
  TypedEventFilter<AddHoldRecordEventEvent>;

export interface ProcessHoldRecordEventEventObject {
  indexedRequestId: string;
  nonIndexRequestId: string;
  effective_cost: string;
}
export type ProcessHoldRecordEventEvent = TypedEvent<
  [string, string, string],
  ProcessHoldRecordEventEventObject
>;

export type ProcessHoldRecordEventEventFilter =
  TypedEventFilter<ProcessHoldRecordEventEvent>;

export interface ReleaseHoldRecordEventEventObject {
  indexedRequestId: string;
  nonIndexRequestId: string;
}
export type ReleaseHoldRecordEventEvent = TypedEvent<
  [string, string],
  ReleaseHoldRecordEventEventObject
>;

export type ReleaseHoldRecordEventEventFilter =
  TypedEventFilter<ReleaseHoldRecordEventEvent>;

export interface SimpleUpdatedEventEventObject {
  requestId: BigNumber;
  budget: BigNumber;
}
export type SimpleUpdatedEventEvent = TypedEvent<
  [BigNumber, BigNumber],
  SimpleUpdatedEventEventObject
>;

export type SimpleUpdatedEventEventFilter =
  TypedEventFilter<SimpleUpdatedEventEvent>;

export interface TransferPaymentEventEventObject {
  indexedRequestId: string;
  payerAddress: string;
  payeeAddress: string;
  nonIndexRequestId: string;
  transferAmount: BigNumber;
}
export type TransferPaymentEventEvent = TypedEvent<
  [string, string, string, string, BigNumber],
  TransferPaymentEventEventObject
>;

export type TransferPaymentEventEventFilter =
  TypedEventFilter<TransferPaymentEventEvent>;

export interface Escrow extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EscrowInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    add_hold_record(
      requestId: PromiseOrValue<string>,
      budget: PromiseOrValue<string>,
      currency: PromiseOrValue<string>,
      payerAddress: PromiseOrValue<string>,
      payeeAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    holdMapping(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string] & {
        budget: string;
        currency: string;
        payer: string;
        payee: string;
      }
    >;

    process_hold_record(
      requestId: PromiseOrValue<string>,
      effectiveCost: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    release_hold_record(
      requestId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    simpleHoldMapping(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    update_mappingthen_success(
      requestId: PromiseOrValue<BigNumberish>,
      budget: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  add_hold_record(
    requestId: PromiseOrValue<string>,
    budget: PromiseOrValue<string>,
    currency: PromiseOrValue<string>,
    payerAddress: PromiseOrValue<string>,
    payeeAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  holdMapping(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string] & {
      budget: string;
      currency: string;
      payer: string;
      payee: string;
    }
  >;

  process_hold_record(
    requestId: PromiseOrValue<string>,
    effectiveCost: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  release_hold_record(
    requestId: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  simpleHoldMapping(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  update_mappingthen_success(
    requestId: PromiseOrValue<BigNumberish>,
    budget: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    add_hold_record(
      requestId: PromiseOrValue<string>,
      budget: PromiseOrValue<string>,
      currency: PromiseOrValue<string>,
      payerAddress: PromiseOrValue<string>,
      payeeAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    holdMapping(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string] & {
        budget: string;
        currency: string;
        payer: string;
        payee: string;
      }
    >;

    process_hold_record(
      requestId: PromiseOrValue<string>,
      effectiveCost: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    release_hold_record(
      requestId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    simpleHoldMapping(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    update_mappingthen_success(
      requestId: PromiseOrValue<BigNumberish>,
      budget: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AddHoldRecordEvent(string,string,string,string,address,address)"(
      indexedRequestId?: PromiseOrValue<string> | null,
      nonIndexRequestId?: null,
      budget?: null,
      currency?: null,
      payerAddress?: null,
      payeeAddress?: null
    ): AddHoldRecordEventEventFilter;
    AddHoldRecordEvent(
      indexedRequestId?: PromiseOrValue<string> | null,
      nonIndexRequestId?: null,
      budget?: null,
      currency?: null,
      payerAddress?: null,
      payeeAddress?: null
    ): AddHoldRecordEventEventFilter;

    "ProcessHoldRecordEvent(string,string,string)"(
      indexedRequestId?: PromiseOrValue<string> | null,
      nonIndexRequestId?: null,
      effective_cost?: null
    ): ProcessHoldRecordEventEventFilter;
    ProcessHoldRecordEvent(
      indexedRequestId?: PromiseOrValue<string> | null,
      nonIndexRequestId?: null,
      effective_cost?: null
    ): ProcessHoldRecordEventEventFilter;

    "ReleaseHoldRecordEvent(string,string)"(
      indexedRequestId?: PromiseOrValue<string> | null,
      nonIndexRequestId?: null
    ): ReleaseHoldRecordEventEventFilter;
    ReleaseHoldRecordEvent(
      indexedRequestId?: PromiseOrValue<string> | null,
      nonIndexRequestId?: null
    ): ReleaseHoldRecordEventEventFilter;

    "SimpleUpdatedEvent(uint256,uint256)"(
      requestId?: null,
      budget?: null
    ): SimpleUpdatedEventEventFilter;
    SimpleUpdatedEvent(
      requestId?: null,
      budget?: null
    ): SimpleUpdatedEventEventFilter;

    "TransferPaymentEvent(string,address,address,string,uint256)"(
      indexedRequestId?: PromiseOrValue<string> | null,
      payerAddress?: PromiseOrValue<string> | null,
      payeeAddress?: PromiseOrValue<string> | null,
      nonIndexRequestId?: null,
      transferAmount?: null
    ): TransferPaymentEventEventFilter;
    TransferPaymentEvent(
      indexedRequestId?: PromiseOrValue<string> | null,
      payerAddress?: PromiseOrValue<string> | null,
      payeeAddress?: PromiseOrValue<string> | null,
      nonIndexRequestId?: null,
      transferAmount?: null
    ): TransferPaymentEventEventFilter;
  };

  estimateGas: {
    add_hold_record(
      requestId: PromiseOrValue<string>,
      budget: PromiseOrValue<string>,
      currency: PromiseOrValue<string>,
      payerAddress: PromiseOrValue<string>,
      payeeAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    holdMapping(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    process_hold_record(
      requestId: PromiseOrValue<string>,
      effectiveCost: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    release_hold_record(
      requestId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    simpleHoldMapping(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    update_mappingthen_success(
      requestId: PromiseOrValue<BigNumberish>,
      budget: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    add_hold_record(
      requestId: PromiseOrValue<string>,
      budget: PromiseOrValue<string>,
      currency: PromiseOrValue<string>,
      payerAddress: PromiseOrValue<string>,
      payeeAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    holdMapping(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    process_hold_record(
      requestId: PromiseOrValue<string>,
      effectiveCost: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    release_hold_record(
      requestId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    simpleHoldMapping(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    update_mappingthen_success(
      requestId: PromiseOrValue<BigNumberish>,
      budget: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
