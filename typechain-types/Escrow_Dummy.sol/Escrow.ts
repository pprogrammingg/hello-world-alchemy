/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface EscrowInterface extends utils.Interface {
  functions: {
    "update_mapping_then_asset_failure(uint256)": FunctionFragment;
    "update_mapping_then_revert(uint256,uint256)": FunctionFragment;
    "update_mappingthen_success(uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "update_mapping_then_asset_failure"
      | "update_mapping_then_revert"
      | "update_mappingthen_success"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "update_mapping_then_asset_failure",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "update_mapping_then_revert",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "update_mappingthen_success",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "update_mapping_then_asset_failure",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "update_mapping_then_revert",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "update_mappingthen_success",
    data: BytesLike
  ): Result;

  events: {
    "UpdatedEvent(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "UpdatedEvent"): EventFragment;
}

export interface UpdatedEventEventObject {
  requestId: BigNumber;
  budget: BigNumber;
}
export type UpdatedEventEvent = TypedEvent<
  [BigNumber, BigNumber],
  UpdatedEventEventObject
>;

export type UpdatedEventEventFilter = TypedEventFilter<UpdatedEventEvent>;

export interface Escrow extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EscrowInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    update_mapping_then_asset_failure(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    update_mapping_then_revert(
      requestId: PromiseOrValue<BigNumberish>,
      budget: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    update_mappingthen_success(
      requestId: PromiseOrValue<BigNumberish>,
      budget: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  update_mapping_then_asset_failure(
    requestId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  update_mapping_then_revert(
    requestId: PromiseOrValue<BigNumberish>,
    budget: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  update_mappingthen_success(
    requestId: PromiseOrValue<BigNumberish>,
    budget: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    update_mapping_then_asset_failure(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    update_mapping_then_revert(
      requestId: PromiseOrValue<BigNumberish>,
      budget: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    update_mappingthen_success(
      requestId: PromiseOrValue<BigNumberish>,
      budget: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "UpdatedEvent(uint256,uint256)"(
      requestId?: null,
      budget?: null
    ): UpdatedEventEventFilter;
    UpdatedEvent(requestId?: null, budget?: null): UpdatedEventEventFilter;
  };

  estimateGas: {
    update_mapping_then_asset_failure(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    update_mapping_then_revert(
      requestId: PromiseOrValue<BigNumberish>,
      budget: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    update_mappingthen_success(
      requestId: PromiseOrValue<BigNumberish>,
      budget: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    update_mapping_then_asset_failure(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    update_mapping_then_revert(
      requestId: PromiseOrValue<BigNumberish>,
      budget: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    update_mappingthen_success(
      requestId: PromiseOrValue<BigNumberish>,
      budget: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
